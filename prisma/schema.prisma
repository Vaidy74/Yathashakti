generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:Nini2720@localhost:5432/yathashakti?schema=public"
}

model User {
  id            String              @id @default(cuid())
  name          String
  email         String              @unique
  password      String?
  role          UserRole            @default(FIELD_OFFICER)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  logs          AuditLog[]
  programsOwned Program[]           @relation("ProgramOwner")
  programs      ProgramTeamMember[]
  tasks         Task[]
}

model AuditLog {
  id           String   @id @default(cuid())
  entityType   String
  entityId     String
  action       String
  previousData Json?
  newData      Json?
  userId       String
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
}

model Donor {
  id             String           @id @default(cuid())
  name           String
  type           DonorType
  keyContact     String?
  keyContactRole String?
  email          String           @unique
  phone          String?
  address        String?
  onboardingDate DateTime         @default(now())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  contacts       DonorContact[]
  documents      DonorDocument[]
  contributions  ProgramFunding[]
  transactions   Transaction[]
}

model DonorContact {
  id        String   @id @default(cuid())
  name      String
  role      String?
  email     String?
  phone     String?
  donorId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  donor     Donor    @relation(fields: [donorId], references: [id], onDelete: Cascade)
}

model DonorDocument {
  id         String   @id @default(cuid())
  label      String
  fileUrl    String
  fileType   String?
  uploadedAt DateTime @default(now())
  donorId    String
  donor      Donor    @relation(fields: [donorId], references: [id], onDelete: Cascade)
}

model Program {
  id                       String                   @id @default(cuid())
  name                     String
  summary                  String
  categoryId               String
  status                   ProgramStatus            @default(PLANNING)
  startDate                DateTime
  endDate                  DateTime?
  ownerId                  String
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @updatedAt
  problemStatement         String?
  longTermGoal             String?
  targetPopulation         String?
  shortTermOutcomes        String?
  mediumTermOutcomes       String?
  outputs                  String?
  activities               String?
  keyAssumptions           String?
  minGrantSize             Float                    @default(0)
  maxGrantSize             Float                    @default(0)
  minRepaymentTenor        Int                      @default(1)
  maxRepaymentTenor        Int                      @default(12)
  budgetForRevolvingGrants Float                    @default(0)
  eligibilityCriteria      EligibilityCriterion[]
  grants                   Grant[]
  metrics                  ImpactMetric[]
  category                 ProgramCategory          @relation(fields: [categoryId], references: [id])
  owner                    User                     @relation("ProgramOwner", fields: [ownerId], references: [id])
  documents                ProgramDocument[]
  expenses                 ProgramExpense[]
  funding                  ProgramFunding[]
  milestones               ProgramMilestone[]
  sdgGoals                 ProgramSDGGoal[]
  serviceProviders         ProgramServiceProvider[]
  team                     ProgramTeamMember[]
}

model ProgramCategory {
  id       String    @id @default(cuid())
  name     String    @unique
  programs Program[]
}

model SDGGoal {
  id          String           @id
  name        String
  description String?
  programs    ProgramSDGGoal[]
}

model ProgramSDGGoal {
  programId String
  sdgGoalId String
  program   Program @relation(fields: [programId], references: [id], onDelete: Cascade)
  sdgGoal   SDGGoal @relation(fields: [sdgGoalId], references: [id], onDelete: Cascade)

  @@id([programId, sdgGoalId])
}

model ImpactMetric {
  id            String   @id @default(cuid())
  name          String
  unit          String
  baselineValue String?
  midlineValue  String?
  endlineValue  String?
  targetValue   String?
  notes         String?
  programId     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  program       Program  @relation(fields: [programId], references: [id], onDelete: Cascade)
}

model EligibilityCriterion {
  id          String   @id @default(cuid())
  label       String
  description String
  programId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  program     Program  @relation(fields: [programId], references: [id], onDelete: Cascade)
}

model ProgramTeamMember {
  programId String
  userId    String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  program   Program  @relation(fields: [programId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([programId, userId])
}

model ProgramMilestone {
  id            String          @id @default(cuid())
  name          String
  targetDate    DateTime?
  status        MilestoneStatus @default(TO_DO)
  ownerId       String?
  description   String?
  completedDate DateTime?
  programId     String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  program       Program         @relation(fields: [programId], references: [id], onDelete: Cascade)
  tasks         Task[]
}

model ProgramDocument {
  id          String   @id @default(cuid())
  name        String
  type        String
  description String?
  fileUrl     String?
  uploadedAt  DateTime @default(now())
  programId   String
  program     Program  @relation(fields: [programId], references: [id], onDelete: Cascade)
}

model ProgramFunding {
  id        String   @id @default(cuid())
  amount    Float
  date      DateTime
  notes     String?
  donorId   String
  programId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  donor     Donor    @relation(fields: [donorId], references: [id], onDelete: Cascade)
  program   Program  @relation(fields: [programId], references: [id], onDelete: Cascade)
}

model ProgramExpense {
  id        String   @id @default(cuid())
  name      String
  budgeted  Float
  actual    Float?
  programId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  program   Program  @relation(fields: [programId], references: [id], onDelete: Cascade)
}

model ServiceProvider {
  id            String                   @id @default(cuid())
  name          String
  category      String
  contactPerson String?
  contactNumber String?
  type          ServiceProviderType
  email         String?
  phone         String?
  location      String?
  description   String?
  website       String?
  services      String[]
  ratePerDay    Float?
  registeredOn  DateTime                 @default(now())
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  grants        Grant[]
  programs      ProgramServiceProvider[]
  documents     ServiceProviderDocument[]
  transactions  Transaction[]
}

model ProgramServiceProvider {
  programId         String
  serviceProviderId String
  program           Program         @relation(fields: [programId], references: [id], onDelete: Cascade)
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)

  @@id([programId, serviceProviderId])
}

model ServiceProviderDocument {
  id                String          @id @default(cuid())
  name              String
  type              String
  fileUrl           String
  description       String?
  uploadedAt        DateTime        @default(now())
  serviceProviderId String
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)
}

model Grantee {
  id          String            @id @default(cuid())
  name        String
  gender      Gender?
  phone       String
  email       String?
  address     String?
  village     String
  district    String
  state       String
  pincode     String?
  dateOfBirth DateTime?
  idType      String?
  idNumber    String?
  sector      String
  activities  String?
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  programs    String[]
  grants      Grant[]
  documents   GranteeDocument[]
}

model GranteeDocument {
  id         String   @id @default(cuid())
  name       String
  type       String
  fileUrl    String
  uploadedAt DateTime @default(now())
  granteeId  String
  grantee    Grantee  @relation(fields: [granteeId], references: [id], onDelete: Cascade)
}

model Grant {
  id                String                 @id @default(cuid())
  grantIdentifier   String                 @unique
  amount            Float
  disbursementDate  DateTime?
  status            GrantStatus            @default(PENDING)
  repaymentRate     Float                  @default(100)
  notes             String?
  programId         String
  granteeId         String
  serviceProviderId String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  communications    Communication[]
  grantee           Grantee                @relation(fields: [granteeId], references: [id])
  program           Program                @relation(fields: [programId], references: [id])
  serviceProvider   ServiceProvider?       @relation(fields: [serviceProviderId], references: [id])
  ledgerEntries     LedgerEntry[]
  repaymentHistory  Repayment[]
  repaymentSchedule RepaymentInstallment[]
  transactions      Transaction[]
}

model RepaymentInstallment {
  id             String            @id @default(cuid())
  dueDate        DateTime
  expectedAmount Float
  status         InstallmentStatus @default(PENDING)
  paidAmount     Float?
  paymentDate    DateTime?
  notes          String?
  grantId        String
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  grant          Grant             @relation(fields: [grantId], references: [id], onDelete: Cascade)
}

model Repayment {
  id            String          @id @default(cuid())
  amount        Float
  date          DateTime
  method        RepaymentMethod
  notes         String?
  grantId       String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ledgerEntries LedgerEntry[]
  grant         Grant           @relation(fields: [grantId], references: [id], onDelete: Cascade)
}

model Communication {
  id        String            @id @default(cuid())
  date      DateTime
  type      CommunicationType
  notes     String
  evidence  String?
  grantId   String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  grant     Grant             @relation(fields: [grantId], references: [id], onDelete: Cascade)
}

model LedgerEntry {
  id          String          @id @default(cuid())
  date        DateTime
  type        LedgerEntryType
  description String
  amount      Float
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  grantId     String?
  repaymentId String?
  grant       Grant?          @relation(fields: [grantId], references: [id])
  repayment   Repayment?      @relation(fields: [repaymentId], references: [id])
}

model Task {
  id                     String            @id @default(cuid())
  title                  String
  description            String?
  dueDate                DateTime?
  status                 TaskStatus        @default(TO_DO)
  priority               TaskPriority      @default(MEDIUM)
  assigneeId             String?
  relatedProgramId       String?
  originatingMilestoneId String?
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  assignee               User?             @relation(fields: [assigneeId], references: [id])
  originatingMilestone   ProgramMilestone? @relation(fields: [originatingMilestoneId], references: [id])
}

enum UserRole {
  SUPER_ADMIN
  PROGRAM_MANAGER
  FIELD_OFFICER
  FINANCE_ADMIN
}

enum DonorType {
  INDIVIDUAL
  LEGAL_ENTITY
}

enum ProgramStatus {
  PLANNING
  ACTIVE
  COMPLETED
  SUSPENDED
}

enum MilestoneStatus {
  TO_DO
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum ServiceProviderType {
  IMPLEMENTING_PARTNER_SELF
  IMPLEMENTING_PARTNER_THIRD_PARTY
  ME_PARTNER_THIRD_PARTY
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum TransactionCategory {
  DONATION
  GRANT
  REPAYMENT
  SERVICE_PROVIDER
  OPERATIONAL
  OTHER
}

enum PaymentMethod {
  BANK_TRANSFER
  CASH
  CHECK
  ONLINE_PAYMENT
  MOBILE_PAYMENT
  OTHER
}

model Transaction {
  id              String            @id @default(cuid())
  date            DateTime
  description     String
  type            TransactionType
  category        TransactionCategory
  amount          Float
  paymentMethod   PaymentMethod
  reference       String
  status          TransactionStatus @default(PENDING)
  notes           String?
  grantId         String?
  grant           Grant?            @relation(fields: [grantId], references: [id])
  donorId         String?
  donor           Donor?            @relation(fields: [donorId], references: [id])
  serviceProviderId String?
  serviceProvider ServiceProvider?  @relation(fields: [serviceProviderId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum GrantStatus {
  PENDING
  DISBURSED
  CURRENT
  OVERDUE
  COMPLETED
  DEFAULTED
  CANCELLED
}

enum InstallmentStatus {
  PENDING
  PAID
  PARTIALLY_PAID
  OVERDUE
  CANCELLED
}

enum RepaymentMethod {
  UPI
  BANK_TRANSFER
  CASH
  CHECK
  OTHER
}

enum CommunicationType {
  SMS
  WHATSAPP_TEXT
  WHATSAPP_VOICE
  PHONE_CALL
  EMAIL
  IN_PERSON
  OTHER
}

enum LedgerEntryType {
  DISBURSEMENT
  REPAYMENT
  DONOR_CONTRIBUTION
  ADJUSTMENT
}

enum TaskStatus {
  TO_DO
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
